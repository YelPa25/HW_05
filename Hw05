#include <iostream>
#include <vector>
#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>

class CustomSprite : public sf::Sprite {
public:
    void setBounds(int left, int right, int top, int bottom) {
        bound_top = top;
        bound_bottom = bottom;
        bound_right = right;
        bound_left = left;
    }

    bool Collision_T(sf::FloatRect wall_bounds, sf::FloatRect guy_bounds) {
        return ((guy_bounds.top + guy_bounds.height >= wall_bounds.top - 3) &&
                (guy_bounds.top < wall_bounds.top) &&
                (guy_bounds.left + guy_bounds.width > wall_bounds.left + 3) &&
                (guy_bounds.left < wall_bounds.left + wall_bounds.width - 3));
    }

    bool Collision_B(sf::FloatRect wall_bounds, sf::FloatRect guy_bounds) {
        return ((guy_bounds.top <= wall_bounds.top + wall_bounds.height + 3) &&
                (guy_bounds.top > wall_bounds.top) &&
                (guy_bounds.left + guy_bounds.width > wall_bounds.left + 3) &&
                (guy_bounds.left < wall_bounds.left + wall_bounds.width - 3));
    }

    bool Collision_L(sf::FloatRect wall_bounds, sf::FloatRect guy_bounds) {
        return ((guy_bounds.left <= wall_bounds.left + wall_bounds.width + 3) &&
                (guy_bounds.left > wall_bounds.left) &&
                (guy_bounds.top + guy_bounds.height > wall_bounds.top + 3) &&
                (guy_bounds.top < wall_bounds.top + wall_bounds.height - 3));
    }

    bool Collision_R(sf::FloatRect wall_bounds, sf::FloatRect guy_bounds) {
        return ((guy_bounds.left + guy_bounds.width >= wall_bounds.left - 3) &&
                (guy_bounds.left < wall_bounds.left) &&
                (guy_bounds.top + guy_bounds.height > wall_bounds.top + 3) &&
                (guy_bounds.top < wall_bounds.top + wall_bounds.height - 3));
    }

    void moveInDirection(const sf::Time &elapsed, const std::vector<sf::Sprite> &obstacles) {
        float dx = 0, dy = 0;
        float speed = 100.0f;

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
            dy -= speed * elapsed.asSeconds();
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
            dy += speed * elapsed.asSeconds();
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
            dx -= speed * elapsed.asSeconds();
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
            dx += speed * elapsed.asSeconds();

        sf::Vector2f old_pos = getPosition();
        move(dx, 0);
        for (auto &obstacle : obstacles) {
            if (getGlobalBounds().intersects(obstacle.getGlobalBounds())) {
                setPosition(old_pos);
                break;
            }
        }

        old_pos = getPosition();
        move(0, dy);
        for (auto &obstacle : obstacles) {
            if (getGlobalBounds().intersects(obstacle.getGlobalBounds())) {
                setPosition(old_pos);
                break;
            }
        }
    }

private:
    int bound_top = 0;
    int bound_bottom = 0;
    int bound_left = 0;
    int bound_right = 0;
};

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Labyrinth Game");
    sf::Clock clock;

    sf::Texture guy_tex, grass_tex, wall_tex;
    guy_tex.loadFromFile("guy.png");
    grass_tex.loadFromFile("grass.png");
    wall_tex.loadFromFile("wall.png");

    CustomSprite guy;
    guy.setTexture(guy_tex);
    guy.setPosition(100, 100);

    std::vector<sf::Sprite> walls;

    for (int i = 0; i < 10; ++i) {
        sf::Sprite wall;
        wall.setTexture(wall_tex);
        wall.setScale(0.3f, 0.3f);
        wall.setPosition(200 + i * 40, 200);
        walls.push_back(wall);
    }

    for (int i = 0; i < 6; ++i) {
        sf::Sprite wall;
        wall.setTexture(wall_tex);
        wall.setScale(0.3f, 0.3f);
        wall.setPosition(400, 200 + i * 40);
        walls.push_back(wall);
    }

    std::vector<sf::Sprite> grass_tiles;
    for (int y = 0; y < 600; y += 64) {
        for (int x = 0; x < 800; x += 64) {
            sf::Sprite grass_tile;
            grass_tile.setTexture(grass_tex);
            grass_tile.setPosition(x, y);
            grass_tiles.push_back(grass_tile);
        }
    }

    while (window.isOpen()) {
        sf::Time elapsed = clock.restart();
        sf::Event event;

        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        guy.setBounds(0, window.getSize().x, 0, window.getSize().y);
        guy.moveInDirection(elapsed, walls);

        window.clear();

        for (auto &tile : grass_tiles)
            window.draw(tile);

        for (auto &wall : walls)
            window.draw(wall);

        window.draw(guy);
        window.display();
    }

    return 0;
}
