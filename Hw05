#include <SFML/Graphics.hpp>
#include <vector>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Labirynt");

    sf::Texture grassTexture;
    grassTexture.loadFromFile("grass.png");

    sf::Sprite background(grassTexture);
    background.setScale(
        (float)window.getSize().x / grassTexture.getSize().x,
        (float)window.getSize().y / grassTexture.getSize().y
    );

    sf::Texture wallTexture;
    wallTexture.loadFromFile("wall.png");

    std::vector<sf::Sprite> walls;
    std::vector<sf::Vector2f> wallPositions = {
        {64, 64}, {64, 128}, {64, 192},
        {192, 64}, {256, 64},
        {384, 128}, {384, 192}, {384, 256},
        {320, 256}
    };

    for (auto pos : wallPositions) {
        sf::Sprite wall(wallTexture);
        wall.setPosition(pos);
        walls.push_back(wall);
    }

    sf::Texture playerTexture;
    playerTexture.loadFromFile("guy.png");

    sf::Sprite player(playerTexture);
    player.setPosition(128, 320);
    player.setScale(0.7f, 0.7f);

    sf::Clock clock;
    float speed = 100.0f;

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        float deltaTime = clock.restart().asSeconds();
        sf::Vector2f movement(0.f, 0.f);

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
            movement.x -= speed * deltaTime;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
            movement.x += speed * deltaTime;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
            movement.y -= speed * deltaTime;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
            movement.y += speed * deltaTime;

        // Save current position before moving
        sf::Vector2f oldPos = player.getPosition();
        player.move(movement);

        // Collision detection with all walls
        for (auto& wall : walls) {
            if (player.getGlobalBounds().intersects(wall.getGlobalBounds())) {
                player.setPosition(oldPos); // undo move
                break;
            }
        }

        window.clear();
        window.draw(background);

        for (auto& wall : walls)
            window.draw(wall);

        window.draw(player);
        window.display();
    }

    return 0;
}
